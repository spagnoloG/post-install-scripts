

typeset -U path cdpath fpath manpath

ZSH=/usr/share/oh-my-zsh/
ZSH_THEME="lambda"

plugins=(archlinux
	asdf
	bundler
	docker
	jsontools
	vscode
	web-search
	tig
    fzf-tab
	gitfast
	colored-man-pages
	colorize
	command-not-found
	cp
	dirhistory
	sudo
	zsh-syntax-highlighting
    zsh-autosuggestions)

# Zoxide 
eval "$(zoxide init zsh)"

# History options should be set in .zshrc and after oh-my-zsh sourcing.
# See https://github.com/nix-community/home-manager/issues/177.
HISTSIZE="10000"
SAVEHIST="10000"

HISTFILE="$HOME/.zsh_history"
mkdir -p "$(dirname "$HISTFILE")"

setopt HIST_FCNTL_LOCK
setopt HIST_IGNORE_DUPS
unsetopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
unsetopt HIST_EXPIRE_DUPS_FIRST
setopt SHARE_HISTORY
unsetopt EXTENDED_HISTORY


export EDITOR='nvim'
export MANPAGER="nvim +Man\!"
export TRASH_DIR="$HOME/.trash"

bin_txt() {
    curl -X PUT --data "$1" https://p.spanskiduh.dev
}

bin_file() {
    curl -X PUT --data-binary "@$1" https://p.spanskiduh.dev
}

pdfgrep() {
    # 1. Check for dependencies: fzf and rga
    if ! command -v rga &> /dev/null || ! command -v fzf &> /dev/null; then
        echo "Error: This function requires 'ripgrep-all (rga)' and 'fzf' to be installed."
        return 1
    fi

    # 2. Check for search term
    if [[ -z "$1" ]]; then
        echo "Usage: pdfgrep <search-term>"
        return 1
    fi
    
    # 3. Run the search and pipe to a more robust fzf command
    rga --ignore-case --pretty --max-depth 1 -t pdf "$1" . | \
    fzf --ansi \
        --delimiter ':' \
        --preview-window 'right,60%,border-left' \
        --bind "enter:execute(xdg-open {1} > /dev/null 2>&1)" \
        --preview "echo {} | cut -d: -f4- | sed 's/\x1b\[[0-9;]*m//g'"
}

_move_to_trash () {
    mkdir -p "$TRASH_DIR"

    for item in "$@"; do
        # Skip options like -r, -f
        if [[ $item == -* ]]; then
            continue
        fi

        # Check if the file or directory exists
        if [[ -e $item ]]; then
            base_name=$(basename "$item")
            target="$TRASH_DIR/$base_name"
            
            # Handle name conflict
            if [[ -e $target ]]; then
                timestamp=$(date +"%Y%m%d%H%M%S")
                target="${TRASH_DIR}/${base_name}_${timestamp}"
            fi

            mv "$item" "$target"
            echo "Moved $item to $target"
        else
            echo "move_to_trash: $item: No such file or directory"
        fi
    done
}

sync_code() {
    local server_name="$1"
    local src_dir="$SRC_DIR"
    local dst_dir="$DST_DIR"
    local exit_code=0
    
    if [[ -z "$server_name" ]]; then
        echo "USAGE: sync_code <server_name> - Synchronizes files from source to destination using rsync/scp" >&2
        echo "" >&2
        echo "REQUIRED:" >&2
        echo "  server_name  SSH server name to sync to" >&2
        echo "" >&2
        echo "ENVIRONMENT VARIABLES:" >&2
        echo "  SRC_DIR      Source directory (required)" >&2
        echo "  DST_DIR      Destination directory (required)" >&2
        echo "  IGNORE_DIRS  Comma-separated list of directories to exclude (optional)" >&2
        echo "               Example: IGNORE_DIRS=\".venv,.git,results\"" >&2
        return 1
    fi
    
    if [[ -n "$DST_DIR" ]]; then
        dst_dir="${server_name}:${DST_DIR}"
        echo "INFO: Using server '$server_name' with destination '$dst_dir'"
    fi
    
    if [[ -z "$src_dir" || -z "$DST_DIR" ]]; then
        echo "USAGE: sync_code <server_name> - Synchronizes files from source to destination using rsync/scp" >&2
        echo "" >&2
        echo "REQUIRED:" >&2
        echo "  server_name  SSH server name to sync to" >&2
        echo "" >&2
        echo "ENVIRONMENT VARIABLES:" >&2
        if [[ -z "$src_dir" ]]; then
            echo "ERROR: SRC_DIR environment variable is not set" >&2
            echo "INFO: Set it with: export SRC_DIR=/path/to/source" >&2
        fi
        if [[ -z "$DST_DIR" ]]; then
            echo "ERROR: DST_DIR environment variable is not set" >&2
            echo "INFO: Set it with: export DST_DIR=/path/to/destination" >&2
        fi
        echo "  IGNORE_DIRS  Comma-separated list of directories to exclude (optional)" >&2
        echo "               Example: IGNORE_DIRS=\".venv,.git,results\"" >&2
        return 1
    fi
    
    if [[ "$src_dir" == "." ]]; then
        src_dir="$(pwd)"
        echo "INFO: Converting SRC_DIR '.' to absolute path: '$src_dir'"
    elif [[ "$src_dir" == "./"* ]]; then
        src_dir="$(pwd)/${src_dir#./}"
        echo "INFO: Converting relative SRC_DIR to absolute path: '$src_dir'"
    elif [[ "$src_dir" != "/"* && "$src_dir" != *":"* ]]; then
        # Handle other relative paths (not starting with / and not remote)
        src_dir="$(pwd)/$src_dir"
        echo "INFO: Converting relative SRC_DIR to absolute path: '$src_dir'"
    fi
    
    if [[ "$dst_dir" == "." ]]; then
        dst_dir="$(pwd)"
        echo "INFO: Converting DST_DIR '.' to absolute path: '$dst_dir'"
    elif [[ "$dst_dir" == "./"* ]]; then
        dst_dir="$(pwd)/${dst_dir#./}"
        echo "INFO: Converting relative DST_DIR to absolute path: '$dst_dir'"
    elif [[ "$dst_dir" != "/"* && "$dst_dir" != *":"* ]]; then
        # Handle other relative paths (not starting with / and not remote)
        dst_dir="$(pwd)/$dst_dir"
        echo "INFO: Converting relative DST_DIR to absolute path: '$dst_dir'"
    fi
    
    src_dir="${src_dir%/}"
    dst_dir="${dst_dir%/}"
    
    if [[ ! -d "$src_dir" ]]; then
        echo "ERROR: Source directory '$src_dir' does not exist" >&2
        return 1
    fi
    
    if [[ ! -r "$src_dir" ]]; then
        echo "ERROR: Source directory '$src_dir' is not readable" >&2
        return 1
    fi
     
    if [[ "$dst_dir" != *":"* ]]; then
        if [[ "$(realpath "$src_dir" 2>/dev/null)" == "$(realpath "$dst_dir" 2>/dev/null)" ]]; then
            echo "ERROR: Source and destination directories are the same" >&2
            return 1
        fi
    fi
    
    local rsync_exclude_opts=""
    local tar_exclude_opts=""
    if [[ -n "$IGNORE_DIRS" ]]; then
        echo "INFO: Processing IGNORE_DIRS: '$IGNORE_DIRS'"
        IFS=',' read -ra ignore_array <<< "$IGNORE_DIRS"
        for dir in "${ignore_array[@]}"; do
            dir=$(echo "$dir" | xargs)
            if [[ -n "$dir" ]]; then
                rsync_exclude_opts="$rsync_exclude_opts --exclude=$dir"
                tar_exclude_opts="$tar_exclude_opts --exclude=$dir"
                echo "INFO: Will exclude directory: '$dir'"
            fi
        done
    fi
    
    echo "INFO: Starting sync from '$src_dir' to '$dst_dir'"
    
    if command -v rsync >/dev/null 2>&1; then
        echo "INFO: Using rsync for synchronization"
        
        if [[ "$dst_dir" == *":"* ]]; then
            echo "INFO: Testing remote connection..."
            local remote_host="${dst_dir%%:*}"
            if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$remote_host" 'exit' 2>/dev/null; then
                echo "ERROR: Cannot connect to remote host '$remote_host'" >&2
                echo "INFO: Make sure SSH key authentication is set up" >&2
                return 1
            fi
            
            if ! ssh "$remote_host" 'command -v rsync' >/dev/null 2>&1; then
                echo "WARNING: rsync not available on remote host, falling back to scp"
                rsync_available=false
            else
                rsync_available=true
            fi
        else
            rsync_available=true
        fi
        
        if [[ "$rsync_available" == "true" ]]; then
            if rsync -avz --progress --human-readable --stats $rsync_exclude_opts "$src_dir/" "$dst_dir/" 2>&1; then
                exit_code=$?
                if [[ $exit_code -eq 0 ]]; then
                    echo "SUCCESS: rsync completed successfully"
                    return 0
                else
                    echo "ERROR: rsync failed with exit code $exit_code" >&2
                    return $exit_code
                fi
            else
                exit_code=$?
                echo "ERROR: rsync failed with exit code $exit_code" >&2
                return $exit_code
            fi
        fi
    fi
    
    echo "WARNING: rsync not available or failed, falling back to tar+ssh"
    echo "WARNING: Destination files will be overwritten!"
    echo "WARNING: tar+ssh does not provide incremental sync like rsync"
    
    if ! command -v tar >/dev/null 2>&1; then
        echo "ERROR: tar is not available" >&2
        echo "INFO: Please install tar" >&2
        return 1
    fi
    
    if ! command -v ssh >/dev/null 2>&1; then
        echo "ERROR: ssh is not available" >&2
        echo "INFO: Please install openssh-client" >&2
        return 1
    fi
    
    if [[ "$dst_dir" == *":"* ]]; then
        local remote_host="${dst_dir%%:*}"
        local remote_path="${dst_dir#*:}"
        echo "INFO: Testing SSH connection to '$remote_host'..."
        if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$remote_host" 'exit' 2>/dev/null; then
            echo "ERROR: Cannot connect to remote host '$remote_host'" >&2
            echo "INFO: Make sure SSH key authentication is set up" >&2
            return 1
        fi
        
        echo "INFO: Ensuring remote directory '$remote_path' exists"
        if ! ssh "$remote_host" "mkdir -p '$remote_path'" 2>/dev/null; then
            echo "ERROR: Could not create remote directory '$remote_path'" >&2
            return 1
        fi
        
        echo "INFO: Using tar+ssh for synchronization with exclusions"
        echo "INFO: This may take longer than rsync for large directories"
        
        if (cd "$src_dir" && tar -cf - $tar_exclude_opts .) | ssh "$remote_host" "cd '$remote_path' && tar -xf -"; then
            echo "SUCCESS: tar+ssh completed successfully"
            return 0
        else
            exit_code=$?
            echo "ERROR: tar+ssh failed with exit code $exit_code" >&2
            return $exit_code
        fi
    else
        echo "INFO: Using tar for local synchronization with exclusions"
        if ! mkdir -p "$dst_dir" 2>/dev/null; then
            echo "ERROR: Could not create destination directory '$dst_dir'" >&2
            return 1
        fi
        
        if (cd "$src_dir" && tar -cf - $tar_exclude_opts .) | (cd "$dst_dir" && tar -xf -); then
            echo "SUCCESS: tar completed successfully"
            return 0
        else
            exit_code=$?
            echo "ERROR: tar failed with exit code $exit_code" >&2
            return $exit_code
        fi
    fi
}

_empty_trash () {
    if [[ -d $TRASH_DIR ]]; then 
        \rm -rf "${TRASH_DIR:?}"/*
        echo "Trash emptied."
    else
        echo "Trash directory does not exist."
    fi
}

_rm_completion() {
    _alternative 'files:file:_files'
}

# Aliases
alias -- 'md-notes'='cd ~/Documents/md-notes/ && nvim .'
alias -- 'night'='brightnessctl s 1%'
alias -- 'opdf'='okular $(find ~/  -type f -iname '\''*pdf'\'' | fzf)'
alias -- 'rm'='_move_to_trash'
alias -- 'rot13'='tr '\''A-Za-z'\'' '\''N-ZA-Mn-za-m'\'''
alias -- 'sup'='power off'
alias -- 'sur'='systemctl reboot'
alias -- 'sus'='systemctl suspend'
alias -- 'tree'='eza --tree'
alias -- 'vi'='nvim'
alias -- 'vim'='nvim'
alias -- 'ls'='lsd'
alias -- 'conda'='micromamba'
alias -- 'empty_trash'='_empty_trash'
alias -- 'cd'='z'

autoload -U compinit
compinit
compdef _files _move_to_trash
compdef _rm rm
compdef _files rm
compdef _rm_completion rm

[[ -s "$HOME/.grc.zsh" ]] && source $HOME/.grc.zsh

# Named Directory Hashes

source $ZSH/oh-my-zsh.sh

ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor)
typeset -gA ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[cursor]='bold'

ZSH_HIGHLIGHT_STYLES[alias]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[builtin]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[function]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[command]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[precommand]='fg=green,bold'
ZSH_HIGHLIGHT_STYLES[hashed-command]='fg=green,bold'

# Ctrl-O opens zsh at the current location, and on exit, cd into ranger's last location.
ranger-cd() {
	tempfile=$(mktemp)
	ranger --choosedir="$tempfile" "${@:-$(pwd)}" < $TTY
	test -f "$tempfile" &&
	if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
	cd -- "$(cat "$tempfile")"
	fi
	rm -f -- "$tempfile"
	# hacky way of transferring over previous command and updating the screen
	VISUAL=true zle edit-command-line
}

spf() {
    os=$(uname -s)

    # Linux
    if [[ "$os" == "Linux" ]]; then
        export SPF_LAST_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/superfile/lastdir"
    fi

    # macOS
    if [[ "$os" == "Darwin" ]]; then
        export SPF_LAST_DIR="$HOME/Library/Application Support/superfile/lastdir"
    fi

    command spf "$@"

    [ ! -f "$SPF_LAST_DIR" ] || {
        . "$SPF_LAST_DIR"
        rm -f -- "$SPF_LAST_DIR" > /dev/null
    }
}

spf-cd() {
    spf
    VISUAL=true zle edit-command-line
}

zle -N ranger-cd
bindkey '^i' ranger-cd
zle -N spf-cd
bindkey '^o' spf-cd

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

ZSH_CACHE_DIR=$HOME/.cache/oh-my-zsh
if [[ ! -d $ZSH_CACHE_DIR ]]; then
  mkdir $ZSH_CACHE_DIR
fi

source $ZSH/oh-my-zsh.sh

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'micromamba shell init' !!
export MAMBA_EXE='/usr/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/spanskiduh/.local/share/mamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from micromamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<
#

# Nvm
if [ -s "/usr/share/nvm/init-nvm.sh" ]; then
    source "/usr/share/nvm/init-nvm.sh"
fi
